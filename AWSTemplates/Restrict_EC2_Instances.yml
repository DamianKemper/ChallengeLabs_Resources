AWSTemplateFormatVersion: 2010-09-09
Description: Create base resources used in all exam lab profiles
Resources:
  # EC2 instance validation solution to check instance count and instance type.
  # -------------------------------------------------------
  FunctionExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: admin-function-execution-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: admin-function-execution-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:*'
                Resource: 'arn:aws:logs:*:*:*'
              - Effect: Allow
                Action:
                  - 'ec2:DescribeInstances'
                  - 'ec2:TerminateInstances'
                Resource: '*'
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Description: Check EC2 instance count and type
      FunctionName: admin-check-ec2-instances-function
      Runtime: nodejs12.x
      Role: !GetAtt FunctionExecutionRole.Arn
      Handler: index.handler
      Timeout: 15
      Code:
        ZipFile: |
          const ec2 = new (require("aws-sdk/clients/ec2"))();
          exports.handler = async (event) => {
            const allowedInstanceTypes = ["t2.nano", "t2.micro", "t2.small", "t2.medium", "t3.nano", "t3.micro", "t3.small", "t3.medium"];
            let activeCount = 0;
            let instanceId = "";
            const params = { Filters: [{ Name: "instance-state-name", Values: ["pending", "running"] }] };
            const ec2Result = await ec2.describeInstances(params).promise();
            for (let reservation of ec2Result.Reservations) {
              for (let instance of reservation.Instances) {
                ++activeCount;
                instanceId = instance.InstanceId;
                // If the instance type is not on the allowed list, terminate it.
                if (!allowedInstanceTypes.includes(instance.InstanceType)) {
                  console.log("Instance type not allowed, terminating InstanceId: ", instanceId);
                  const params = { InstanceIds: [instanceId] };
                  await ec2.terminateInstances(params).promise();
                }
                // If the count of active instances is greater than 4, terminate the last InstanceId.
                if (activeCount > 4) {
                  console.log("Too many active instances, terminating InstanceId: ", instanceId);
                  const params = { InstanceIds: [instanceId] };
                  await ec2.terminateInstances(params).promise();
                }
              }
            }
            return;
          };
  RunFunctionRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Run function on EC2 state change
      EventBusName: default
      Name: admin-ec2-state-change-rule
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - EC2 Instance State-change Notification
        detail:
          state: ["pending", "running"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaFunction.Arn
          Id: TargetFunction
  PermissionForEventsToInvokeLambda:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: 'lambda:InvokeFunction'
      Principal: events.amazonaws.com
      SourceArn: !GetAtt RunFunctionRule.Arn
